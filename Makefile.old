# Makefile for FIT File Analyzer
# Convenient commands for testing, linting, and development

.PHONY: help install install-dev test test-unit test-integration lint format type-check clean coverage all

# Python interpreter
PYTHON := .venv/bin/python3
PIP := $(PYTHON) -m pip
PYTEST := .venv/bin/pytest

help:
	@echo "FIT File Analyzer - Available Commands"
	@echo "======================================"
	@echo ""
	@echo "Setup:"
	@echo "  make install         Install production dependencies"
	@echo "  make install-dev     Install development dependencies"
	@echo ""
	@echo "Testing:"
	@echo "  make test           Run all tests (64 tests including contract and regression tests)"
	@echo "  make test-unit      Run unit tests only"
	@echo "  make test-integration Run integration tests only"
	@echo "  make test-contract  Run contract tests (verify garth API usage)"
	@echo "  make test-regression Run regression tests (sport fields bug)"
	@echo "  make coverage       Generate coverage report"
	@echo ""
	@echo "Code Quality:"
	@echo "  make lint           Run all linters"
	@echo "  make format         Auto-format code with black and isort"
	@echo "  make type-check     Run mypy type checking"
	@echo ""
	@echo "Maintenance:"
	@echo "  make clean          Remove generated files"
	@echo "  make all            Run everything (format, lint, test)"
	@echo ""

install:
	$(PIP) install -r requirements.txt

install-dev:
	$(PIP) install -r requirements.txt
	$(PIP) install -r requirements-dev.txt

test:
	$(PYTEST) test_fit_to_summary.py test_garmin_sync.py test_integration.py test_garth_contract.py test_garth_with_spec.py test_sport_fields_regression.py -v

test-unit:
	$(PYTEST) test_fit_to_summary.py test_garmin_sync.py -v

test-integration:
	$(PYTEST) test_integration.py -v

test-contract:
	$(PYTEST) test_garth_contract.py test_garth_with_spec.py -v

test-regression:
	$(PYTEST) test_sport_fields_regression.py -v

coverage:
	$(PYTEST) test_fit_to_summary.py test_garmin_sync.py test_integration.py test_garth_contract.py test_garth_with_spec.py test_sport_fields_regression.py -v --cov=. --cov-report=term-missing --cov-report=html
	@echo ""
	@echo "Coverage report generated: htmlcov/index.html"

lint:
	@echo "Running flake8..."
	.venv/bin/flake8 fit_to_summary.py garmin_sync.py setup_credentials.py || true
	@echo ""
	@echo "Running pylint..."
	.venv/bin/pylint fit_to_summary.py garmin_sync.py setup_credentials.py --disable=C0111,C0103,R0913,R0914 || true

format:
	@echo "Running black..."
	.venv/bin/black --line-length 100 fit_to_summary.py garmin_sync.py setup_credentials.py
	@echo ""
	@echo "Running isort..."
	.venv/bin/isort --profile black --line-length 100 fit_to_summary.py garmin_sync.py setup_credentials.py
	@echo ""
	@echo "✅ Code formatted!"

type-check:
	.venv/bin/mypy fit_to_summary.py garmin_sync.py --ignore-missing-imports

clean:
	@echo "Cleaning up..."
	rm -rf __pycache__
	rm -rf .pytest_cache
	rm -rf .mypy_cache
	rm -rf htmlcov
	rm -rf .coverage
	rm -f *.pyc
	rm -rf *.egg-info
	find . -type d -name __pycache__ -exec rm -rf {} + 2>/dev/null || true
	@echo "✅ Cleaned!"

all: format lint type-check test
	@echo ""
	@echo "✅ All checks complete!"

# Quick commands
quick-test:
	pytest -x --tb=short

watch-tests:
	pytest-watch

# Pre-commit setup
pre-commit-install:
	pre-commit install

pre-commit-run:
	pre-commit run --all-files
