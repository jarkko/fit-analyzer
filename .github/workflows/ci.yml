name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install -r requirements-dev.txt

      - name: Run tests with coverage (Python 3.13)
        if: matrix.python-version == '3.13'
        run: |
          make coverage

      - name: Run fast tests (Python 3.10-3.12)
        if: matrix.python-version != '3.13'
        run: |
          make test-fast

      - name: Generate coverage report
        if: matrix.python-version == '3.13'
        run: |
          coverage xml
          coverage html

      - name: Check coverage threshold
        if: matrix.python-version == '3.13'
        run: |
          coverage report --fail-under=83

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.13'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Archive coverage results
        if: matrix.python-version == '3.13'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.13"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install -r requirements-dev.txt

      - name: Run linting
        run: |
          make lint

      - name: Check code formatting with black
        run: |
          pip install black
          black --check src/ tests/

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.13"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install bandit[toml] safety

      - name: Run safety check on dependencies
        run: |
          echo "üîç Scanning dependencies for known security vulnerabilities..."
          safety check --output=text || echo "‚ö†Ô∏è Safety check found some issues (non-blocking)"
        continue-on-error: true

      - name: Run bandit security scan on code
        run: |
          echo "üîç Scanning source code for security issues..."
          bandit -r src/ -ll -f screen || echo "‚ö†Ô∏è Bandit found some issues (non-blocking)"
        continue-on-error: true

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.13"
          cache: "pip"

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          twine check dist/*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
