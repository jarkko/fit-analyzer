name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    paths-ignore:
      - "**.md"
      - "docs/**"
      - ".gitignore"
      - "LICENSE"
  schedule:
    - cron: "0 0 * * 0" # Weekly full test on all Python versions

env:
  CACHE_VERSION: v1

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install -r requirements-dev.txt

      - name: Run tests with coverage (Python 3.13)
        if: matrix.python-version == '3.13'
        run: |
          make coverage
          pytest tests/ --junitxml=pytest-results.xml

      - name: Run fast tests (Python 3.10-3.12)
        if: matrix.python-version != '3.13' && github.event_name != 'schedule'
        run: |
          make test-fast

      - name: Run full tests on all versions (scheduled)
        if: github.event_name == 'schedule'
        run: |
          make test

      - name: Generate coverage report
        if: matrix.python-version == '3.13'
        run: |
          coverage xml
          coverage html

      - name: Check coverage threshold
        if: matrix.python-version == '3.13'
        run: |
          coverage report --fail-under=82.5

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.13'
        continue-on-error: true
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Archive coverage results
        if: matrix.python-version == '3.13'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

      - name: Publish test results
        if: always() && matrix.python-version == '3.13'
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: pytest-results.xml
          check_name: Test Results (Python ${{ matrix.python-version }})

      - name: Coverage PR Comment
        if: github.event_name == 'pull_request' && matrix.python-version == '3.13'
        continue-on-error: true
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.13"
          cache: "pip"

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install -r requirements-dev.txt

      - name: Run linting
        run: |
          make lint

      - name: Check code formatting with black
        run: |
          black --check src/ tests/

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.13"
          cache: "pip"

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install bandit[toml] safety

      - name: Run safety check on dependencies
        run: |
          echo "üîç Scanning dependencies for known security vulnerabilities..."
          # Note: 'check' is deprecated but 'scan' requires authentication setup
          safety check --output=text

      - name: Run bandit security scan on code
        run: |
          echo "üîç Scanning source code for security issues..."
          bandit -r src/ -ll -f screen

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, lint, security]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.13"
          cache: "pip"

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          twine check dist/*

      - name: Test package installation
        run: |
          pip install dist/*.whl
          python -c "import fitanalyzer; print(f'‚úÖ Package version: {fitanalyzer.__version__}')"
          python -c "from fitanalyzer import summarize_fit_original; print('‚úÖ Main functions importable')"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
