[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "fitanalyzer"
version = "0.1.0"
description = "A Python library for analyzing Garmin FIT files and calculating training metrics"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "FIT Analyzer Contributors"}
]
keywords = ["garmin", "fit", "fitness", "training", "analysis", "metrics"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    "fitparse>=1.2.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "garth>=0.5.0",
    "python-dateutil>=2.8.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.0.0",
    "flake8>=7.0.0",
    "black>=24.0.0",
    "mypy>=1.8.0",
    "isort>=5.13.0",
    "pylint>=3.0.0",
]

[project.scripts]
fitanalyzer-parse = "fitanalyzer.parser:main"
fitanalyzer-sync = "fitanalyzer.sync:main"
fitanalyzer-setup = "fitanalyzer.credentials:main"

[tool.black]
# Black code formatter configuration
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
# Import sorting configuration
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true
skip = [".venv", "venv", "build", "dist"]

[tool.pylint.master]
# Pylint configuration
ignore = [".venv", "venv", "build", "dist"]
jobs = 0  # Use all CPU cores
persistent = true
unsafe-load-any-extension = false

[tool.pylint.messages_control]
disable = []

[tool.pylint.format]
max-line-length = 100
indent-string = "    "

[tool.pylint.basic]
good-names = ["i", "j", "k", "ex", "Run", "_", "df", "s", "d", "f", "ff", "np", "pd"]

[tool.mypy]
# MyPy type checking configuration
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "fitparse",
    "fitparse.*",
    "garth",
    "garth.*",
    "pandas",
    "numpy",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
# Pytest configuration
minversion = "8.0"
addopts = [
    "-ra",
    "-q",
    "--strict-markers",
    "--strict-config",
]
testpaths = [
    "tests",
]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]

[tool.coverage.run]
# Coverage configuration
source = ["src/fitanalyzer"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/.venv/*",
    "*/venv/*",
    "*/examples/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
